#!/usr/bin/env python3
# -*- coding: utf-8 -*-
# =================================================================
#          #     #                 #     #
#          ##    #   ####   #####  ##    #  ######   #####
#          # #   #  #    #  #    # # #   #  #          #
#          #  #  #  #    #  #    # #  #  #  #####      #
#          #   # #  #    #  #####  #   # #  #          #
#          #    ##  #    #  #   #  #    ##  #          #
#          #     #   ####   #    # #     #  ######     #
#
#       ---   The NorNet Testbed for Multi-Homed Systems  ---
#                       https://www.nntb.no
# =================================================================
#
# Export NorNet Edge measurement configurations to JSON
#
# Copyright (C) 2018-2019 by Thomas Dreibholz
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Contact: dreibh@simula.no


# Ubuntu/Debian dependencies:
# python3-mysql.connector

import datetime
import fnmatch
import json
import logging
import logging.config
import mysql.connector
import os
import re
import subprocess
import sys

import QueryHelper


# ==== Required database user permissions ===================================
# GRANT USAGE ON *.* TO `nneupdateschedul`@`%` IDENTIFIED BY '...';
# GRANT SELECT ON `nne`.`measurement_instance`   TO `nneupdateschedul`@`%`;
# GRANT SELECT ON `nne`.`measurement_descriptor` TO `nneupdateschedul`@`%`;
# GRANT SELECT ON `nne`.`network`                TO `nneupdateschedul`@`%`;
# FLUSH PRIVILEGES;


# ###### Main program #######################################################
if len(sys.argv) < 4:
   sys.stderr.write('Usage: ' + sys.argv[0] + ' database_configuration json_directory logfile\n')
   sys.exit(1)
configurationFile = sys.argv[1]
jsonDirectory     = sys.argv[2]
logFile           = sys.argv[3]

try:
   os.chdir(jsonDirectory)
except Exception as e:
   logging.error('Unable to change to directory ' + CONF_DIRECTORY + ': ' + str(e))
   sys.exit(1)


# ====== Initialise logger ==================================================
LOGGING_CONF = {
   'version': 1,
   'handlers': {
      'default': {
         'level': 'DEBUG',
         'class': 'logging.handlers.TimedRotatingFileHandler',
         'formatter': 'standard',
         'filename': logFile,
         'when': 'D'
      },
   },
   'formatters': {
      'standard': {
         'format': '%(asctime)s %(levelname)s [PID=%(process)d] %(message)s'
      },
   },
   'root': {
      'level': 'DEBUG',
      'handlers': ['default'],
   }
}
logging.config.dictConfig(LOGGING_CONF)
logging.debug('Starting')


# ====== Connect to database ================================================
configuration = QueryHelper.DatabaseConfiguration(sys.argv[1])
configuration.createClient()


# ====== Query database =====================================================
try:
   rows = configuration.query("""\
SELECT
   i.node_id,
   i.id AS measurement_id,
   i.measurement_desc_id, d.name AS measurement_name,
   n.id as network_id, n.mcc, n.mnc, i.iccid,
   i.start_time, i.stop_time,
   d.container
FROM
   measurement_instance i, measurement_descriptor d, network n
WHERE
   i.measurement_desc_id = d.id AND
   i.network_id = n.id
ORDER BY
   node_id, measurement_id;
""")

except mysql.connector.Error as e:
   logging.error('Unable to query database: ' + str(e))
   sys.exit(1)


# ====== Generate configuration =============================================
cmd = [ '/usr/bin/git', 'pull', '-q' ]
subprocess.call(cmd)


# ====== Generate configuration =============================================
def dumpJSON(nodeID, nodeConfig):
   # print(nodeID)
   # print(nodeConfig)
   outputFile = 'node' + str(nodeID) + '.json'
   try:
      with open(outputFile, 'w') as f:
         json.dump(nodeConfig, f, ensure_ascii=False)
   except Exception as e:
      logging.error('Unable to write file ' + outputFile + ': ' + str(e))
      sys.exit(1)

nodesUpdated = set()
nodeID       = None
nodeConfig   = None
for row in rows:
   # print(row)

   # ====== Get configuration for measurement ===============================
   rowNodeID            = int(row[0])
   rowMeasurementID     = row[1]
   rowMeasurementDescID = int(row[2])
   rowMeasurementDesc   = row[3]
   rowNetworkID         = int(row[4])
   rowMCC               = row[5]
   rowMNC               = row[6]
   rowICCID             = row[7]
   rowStartTime         = row[8]
   rowStopTime          = row[9]
   rowContainer         = row[10]

   if ((rowStopTime == None) or (rowStopTime > datetime.datetime.now(datetime.UTC).replace(tzinfo = None))):
      nodesUpdated.add(rowNodeID)

      if rowNodeID != nodeID:
         if nodeConfig != None:
            dumpJSON(nodeID, nodeConfig)
         nodeID     = rowNodeID
         nodeConfig = {  'node_id': nodeID,
                         'instances' : [] }

      # ====== Create instance configuration for measurement ================
      # print('Adding: ' + str(rowMeasurementID) + \
      #       ' of descriptor ' + str(rowMeasurementDescID))
      nodeConfig['instances'].append({
         'measurement_id':      rowMeasurementID,
         'measurement_desc_id': rowMeasurementDescID,
         'measurement_desc':    rowMeasurementDesc,
         'network_id':          rowNetworkID,
         'mcc':                 rowMCC,
         'mnc':                 rowMNC,
         'iccid':               rowICCID,
         'container':           rowContainer,
         'start_time':          str(rowStartTime),
         'stop_time':           str(rowStopTime)
      })

   # else:
   #    print('Already stopped: ' + str(rowMeasurementID) + ' of descriptor ' + \
   #          str(rowMeasurementDescID) + ' at ' + str(rowStopTime))

if nodeConfig != None:
   dumpJSON(nodeID, nodeConfig)


# ====== Update Git repository ==============================================
existingFiles = [file for file in os.listdir('.') if fnmatch.fnmatch(file, 'node[0-9]*.json')]
gitAdd = set()
gitRem = set()
for nodeID in nodesUpdated:
   nodeFile = 'node' + str(nodeID) + '.json'
   gitAdd.add(nodeFile)

for nodeFile in existingFiles:
    match = re.match(r'^Node(\d+)\.json$', nodeFile)
    if match:
       nodeID = int(match.group(1))
       if not nodeID in nodesUpdated:
          gitRem.add(nodeFile)

if len(gitAdd) > 0:
   cmd = [ '/usr/bin/git', 'add' ]
   for file in sorted(gitAdd):
      cmd.append(file)
   # print(cmd)
   subprocess.call(cmd)
if len(gitRem) > 0:
   cmd = [ '/usr/bin/git', 'rm', '-q', '-f' ]
   for file in sorted(gitRem):
      cmd.append(file)
   # print(cmd)
   subprocess.call(cmd)

if (len(gitAdd) > 0) or (len(gitRem) > 0):
   cmd = [ '/usr/bin/git', 'commit', '-q', '-a', '-m', '"Updated configuration files."' ]
   subprocess.call(cmd)
   cmd = [ '/usr/bin/git', 'push', '-q' ]
   subprocess.call(cmd)


# ====== Clean-up ===========================================================
logging.debug('Exiting')
